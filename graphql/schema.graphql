scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    user(
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    books: [Book] @all
    book(id: ID! @eq): Book @find
    bookByFeatured(featured: Boolean! @eq): [Book] @all
    someComplexQuery(search: String!): [Book]

    categories: [Category] @all
    category(id: ID @eq): Category @find
}

type Mutation {
    createCategory(
        name: String @rules(apply: ["required", "unique:categories,name"])
    ): Category @create

    updateCategory(
        id: ID! @rules(apply: ["required"])
        name: String @rules(apply: ["required", "unique:categories,name,$this->category->id"])
    ): Category @update

    deleteCategory(
        id: ID! @rules(apply: ["required"])
    ): Category @delete
}
type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}

type Book {
    id: ID!
    title: String!
    author: String!
    image: String
    link: String
    description: String
    featured: Boolean
    category: Category! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}

type Category {
    id: ID!
    name: String!
    books: [Book]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}
